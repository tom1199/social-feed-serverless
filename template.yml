AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members

# Enable blue/green deployments using this Globals section. For instructions, see the AWS CodeStar User Guide:
# https://docs.aws.amazon.com/codestar/latest/userguide/how-to-modify-serverless-project.html?icmpid=docs_acs_rm_tr
#
# Globals:
#   Function:
#     AutoPublishAlias: live
#     DeploymentPreference:
#       Enabled: true
#       Type: Canary10Percent5Minutes

Resources:
  # GetHelloWorld:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: index.get
  #     Runtime: nodejs4.3
  #     Role:
  #       Fn::ImportValue:
  #         !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
  #     Events:
  #       GetEvent:
  #         Type: Api
  #         Properties:
  #           Path: /
  #           Method: get
  
  # FeedService Functions
  CreateFeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feed/createFeed.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          FEED_TABLE: !Ref FeedTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /feeds
            Method: post
  GetMyFeeds:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feed/getMyFeeds.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          FEED_TABLE: !Ref FeedTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /feeds/my
            Method: get
  GetFollowingFeeds:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feed/getFollowingFeeds.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          FEED_TABLE: !Ref FeedTable
          USER_FOLLOW_TABLE: !Ref FollowUserTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /feeds/following
            Method: get
  LikeFeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feed/likeFeed.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          USER_LIKE_FEED_TABLE: !Ref UserLikeFeedTable
          FEED_LIKED_BY_USER_TABLE: !Ref FeedLikedByUserTable
          FEED_TABLE: !Ref FeedTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /feeds/{feedId}/like
            Method: post
  UnlikeFeed:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feed/unlikeFeed.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          USER_LIKE_FEED_TABLE: !Ref UserLikeFeedTable
          FEED_LIKED_BY_USER_TABLE: !Ref FeedLikedByUserTable
          FEED_TABLE: !Ref FeedTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /feeds/{feedId}/unlike
            Method: post
            
  #UserService
  SearchUsers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user/searchUser.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
          USER_FOLLOW_TABLE: !Ref FollowUserTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /users/{userId}/search
            Method: get
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user/createUser.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /users
            Method: POST
  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user/updateUserProfile.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          USER_TABLE: !Ref UserTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /users/updateUser
            Method: POST
  FollowUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user/followUser.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Environment:
        Variables:
          USER_FOLLOW_TABLE: !Ref FollowUserTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /users/{userId}/follow
            Method: POST

  UnfollowUser:
      Type: AWS::Serverless::Function
      Properties:
        Handler: user/unfollowUser.handler
        Runtime: nodejs6.10
        Role:
          Fn::ImportValue:
            !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
        Environment:
          Variables:
            USER_FOLLOW_TABLE: !Ref FollowUserTable
        Events:
          GetEvent:
            Type: Api
            Properties:
              Path: /users/{userId}/unfollow
              Method: POST

  GetFollowingUsers:
      Type: AWS::Serverless::Function
      Properties:
        Handler: user/getFollowedUsers.handler
        Runtime: nodejs6.10
        Role:
          Fn::ImportValue:
            !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
        Environment:
          Variables:
            USER_FOLLOW_TABLE: !Ref FollowUserTable
            USER_TABLE: !Ref UserTable
        Events:
          GetEvent:
            Type: Api
            Properties:
              Path: /users/{userId}/followUser
              Method: GET

#Util Services            
  # CreateEmailSubscriber:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: utils/createEmailSubscriber.handler
  #     Runtime: nodejs6.10
  #     Role:
  #       Fn::ImportValue:
  #         !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
  
  # SendEmail:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: utils/sendEmail.handler
  #     Runtime: nodejs6.10
  #     Role:
  #       Fn::ImportValue:
  #         !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]

  RekognitionFaceDetection:
    Type: AWS::Serverless::Function
    Properties:
      Handler: utils/rekognitionFaceDetection.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      Timeout: 60
      Events:
        S3FileListener:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketPhotos
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'public/feeds/'
          
  SendSES:
    Type: AWS::Serverless::Function
    Properties:
      Handler: utils/sendSES.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue:
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]          
  
  IncrementUserSignupCount:
    Type: AWS::Serverless::Function
    Properties:
      Handler: utils/incrementNewSignup.handler
      Runtime: nodejs6.10
      Role:
        Fn::ImportValue
          !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
      # Environment:
      #   Variables:
      #     USER_SIGNUP_REPORT_TABLE: !Ref UserSignupReportTable
      Events:
        NewSignup:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt UserTable.Arn
            StartingPosition: TRIM_HORIZON
            
  # CreateReports:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: utils/createAnalysisReport.handler
  #     Runtime: nodejs6.10
  #     Role:
  #       Fn::ImportValue
  #         !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
  #     Environment:
  #       Variables:
  #         USER_TABLE: !Ref UserTable
  #         FEED_TABLE: !Ref FeedTable
  #     Events:
  #       GetEvent:
  #         Type: Api
  #         Properties:
  #           Path: /reports
  #           Method: GET
            
  # SendSMS:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: utils/sendSMS.handler
  #     Runtime: nodejs6.10
  #     Role:
  #       Fn::ImportValue:
  #         !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]

  # CreateThumbnail:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: utils/createThumbnail.handler
  #     Runtime: nodejs6.10
  #     Role:
  #       Fn::ImportValue:
  #         !Join ['-', [!Ref 'ProjectId', !Ref 'AWS::Region', 'LambdaTrustRole']]
  #     Timeout: 60
      # Events:
      #   S3FileListener:
      #     Type: S3
      #     Properties:
      #       Bucket: !Ref S3BucketPhotos
      #       Events: s3:ObjectCreated:*
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: prefix
      #               Value: 'public/feeds/'

  # DynamoDB Feed Table
  FeedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ownerId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
      KeySchema:
        - AttributeName: ownerId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # DynamoDB User Table
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamEnabled: True
        StreamViewType: NEW_AND_OLD_IMAGES

  # DynamoDB Like Table
  UserLikeFeedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: feedId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: feedId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  FeedLikedByUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: feedId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: feedId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  FollowUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: followedUserId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: followedUserId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  # UserSignupReportTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: date
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: date
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5
  #     StreamSpecification:
  #       StreamEnabled: True
  #       StreamViewType: NEW_AND_OLD_IMAGES
  
  S3BucketPhotos:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: social-app-image-upload

  SNSNotiTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "notifyPicture"

        # add additional custom bucket configuration here
  # ResizeLambdaPermissionPhotosS3:
  #     Type: AWS::Lambda::Permission
  #     Properties:
  #       FunctionName:
  #         "Fn::GetAtt":
  #           - CreateThumbnail
  #           - Arn
  #       Principal: "s3.amazonaws.com"
  #       Action: "lambda:InvokeFunction"
  #       SourceAccount:
  #         Ref: AWS::AccountId
  #       SourceArn: "arn:aws:s3:::social-app-image-upload"
        
  # # Task Queue
  # TaskQueue
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     VisibilityTimeout: 60
  #     RedrivePolicy:
  #       deadLetterTargetArn: !Sub ${DeadLetterQueue.Arn}
  #       maxReceiveCount: 10
  
  # # Dead Letter Queue
  # DeadLetterQueue
  #   Type: AWS::SQS:Queue